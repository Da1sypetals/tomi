{
    "segments": [
        {
            "device": 0,
            "address": 30129782784,
            "total_size": 2097152,
            "allocated_size": 6656,
            "active_size": 6656,
            "requested_size": 4292,
            "stream": 0,
            "segment_type": "small",
            "segment_pool_id": [
                0,
                0
            ],
            "is_expandable": false,
            "frames": [],
            "blocks": [
                {
                    "address": 30129782784,
                    "size": 1024,
                    "requested_size": 800,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129783808,
                    "size": 512,
                    "requested_size": 80,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129784320,
                    "size": 512,
                    "requested_size": 80,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129784832,
                    "size": 512,
                    "requested_size": 4,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129785344,
                    "size": 2560,
                    "requested_size": 2560,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129787904,
                    "size": 512,
                    "requested_size": 256,
                    "state": "active_allocated",
                    "frames": []
                },
                {
                    "address": 30129788416,
                    "size": 512,
                    "requested_size": 256,
                    "state": "active_allocated",
                    "frames": [
                        {
                            "name": "torch::unwind::unwind()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                            "filename": "memory_snapshot.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                            "filename": "CUDACachingAllocator.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                            "filename": "VariableType_1.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                            "filename": "VariableType_1.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                            "filename": "python_nn_functions.cpp",
                            "line": 0
                        },
                        {
                            "name": "cfunction_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                            "line": 543
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "mse_loss",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                            "line": 3366
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 114
                        },
                        {
                            "name": "forward",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                            "line": 535
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1541
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_wrapped_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1532
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_Call_Prepend",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 431
                        },
                        {
                            "name": "slot_tp_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                            "line": 7494
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "run_training_with_snapshot",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 57
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 114
                        },
                        {
                            "name": "<module>",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 102
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "PyEval_EvalCode",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 1134
                        },
                        {
                            "name": "run_eval_code_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1291
                        },
                        {
                            "name": "run_mod",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1312
                        },
                        {
                            "name": "pyrun_file",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1208
                        },
                        {
                            "name": "_PyRun_SimpleFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 456
                        },
                        {
                            "name": "_PyRun_AnyFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 90
                        },
                        {
                            "name": "pymain_run_file_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 357
                        },
                        {
                            "name": "Py_BytesMain",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 1090
                        },
                        {
                            "name": "__libc_init_first",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "__libc_start_main",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "_start",
                            "filename": "??",
                            "line": 0
                        }
                    ]
                },
                {
                    "address": 30129788928,
                    "size": 512,
                    "requested_size": 4,
                    "state": "inactive",
                    "frames": []
                },
                {
                    "address": 30129789440,
                    "size": 512,
                    "requested_size": 256,
                    "state": "active_allocated",
                    "frames": [
                        {
                            "name": "torch::unwind::unwind()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                            "filename": "memory_snapshot.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                            "filename": "CUDACachingAllocator.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "VariableType_0.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "VariableType_0.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "RegisterCompositeImplicitAutograd.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                            "filename": "python_nn_functions.cpp",
                            "line": 0
                        },
                        {
                            "name": "cfunction_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                            "line": 543
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "forward",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                            "line": 116
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1541
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_wrapped_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1532
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_Call_Prepend",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 431
                        },
                        {
                            "name": "slot_tp_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                            "line": 7494
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "forward",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 24
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1541
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_wrapped_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1532
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_Call_Prepend",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 431
                        },
                        {
                            "name": "slot_tp_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                            "line": 7494
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "run_training_with_snapshot",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 56
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 114
                        },
                        {
                            "name": "<module>",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 102
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "PyEval_EvalCode",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 1134
                        },
                        {
                            "name": "run_eval_code_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1291
                        },
                        {
                            "name": "run_mod",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1312
                        },
                        {
                            "name": "pyrun_file",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1208
                        },
                        {
                            "name": "_PyRun_SimpleFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 456
                        },
                        {
                            "name": "_PyRun_AnyFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 90
                        },
                        {
                            "name": "pymain_run_file_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 357
                        },
                        {
                            "name": "Py_BytesMain",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 1090
                        },
                        {
                            "name": "__libc_init_first",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "__libc_start_main",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "_start",
                            "filename": "??",
                            "line": 0
                        }
                    ]
                },
                {
                    "address": 30129789952,
                    "size": 2089984,
                    "requested_size": 4,
                    "state": "inactive",
                    "frames": []
                }
            ]
        },
        {
            "device": 0,
            "address": 30144462848,
            "total_size": 20971520,
            "allocated_size": 17039360,
            "active_size": 17039360,
            "requested_size": 17039360,
            "stream": 0,
            "segment_type": "large",
            "segment_pool_id": [
                0,
                0
            ],
            "is_expandable": false,
            "frames": [],
            "blocks": [
                {
                    "address": 30144462848,
                    "size": 8519680,
                    "requested_size": 8519680,
                    "state": "active_allocated",
                    "frames": [
                        {
                            "name": "torch::unwind::unwind()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                            "filename": "memory_snapshot.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                            "filename": "CUDACachingAllocator.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::cuda::getNewWorkspace()",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::cuda::getCurrentCUDABlasHandle()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                            "filename": "Blas.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "VariableType_0.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "VariableType_0.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "RegisterCompositeImplicitAutograd.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                            "filename": "python_nn_functions.cpp",
                            "line": 0
                        },
                        {
                            "name": "cfunction_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                            "line": 543
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "forward",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                            "line": 116
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1541
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_wrapped_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1532
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_Call_Prepend",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 431
                        },
                        {
                            "name": "slot_tp_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                            "line": 7494
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "forward",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 24
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1541
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "do_call_core",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 5945
                        },
                        {
                            "name": "_wrapped_call_impl",
                            "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                            "line": 1532
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_Call_Prepend",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 431
                        },
                        {
                            "name": "slot_tp_call",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                            "line": 7494
                        },
                        {
                            "name": "_PyObject_MakeTpCall",
                            "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                            "line": 215
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 112
                        },
                        {
                            "name": "run_training_with_snapshot",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 56
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "_PyObject_VectorcallTstate",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                            "line": 114
                        },
                        {
                            "name": "<module>",
                            "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                            "line": 102
                        },
                        {
                            "name": "_PyEval_EvalFrame",
                            "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                            "line": 46
                        },
                        {
                            "name": "PyEval_EvalCode",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                            "line": 1134
                        },
                        {
                            "name": "run_eval_code_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1291
                        },
                        {
                            "name": "run_mod",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1312
                        },
                        {
                            "name": "pyrun_file",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 1208
                        },
                        {
                            "name": "_PyRun_SimpleFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 456
                        },
                        {
                            "name": "_PyRun_AnyFileObject",
                            "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                            "line": 90
                        },
                        {
                            "name": "pymain_run_file_obj",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 357
                        },
                        {
                            "name": "Py_BytesMain",
                            "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                            "line": 1090
                        },
                        {
                            "name": "__libc_init_first",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "__libc_start_main",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "_start",
                            "filename": "??",
                            "line": 0
                        }
                    ]
                },
                {
                    "address": 30152982528,
                    "size": 8519680,
                    "requested_size": 8519680,
                    "state": "active_allocated",
                    "frames": [
                        {
                            "name": "torch::unwind::unwind()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                            "filename": "memory_snapshot.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                            "filename": "CUDACachingAllocator.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::cuda::getNewWorkspace()",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::cuda::getCurrentCUDABlasHandle()",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "void at::cuda::blas::gemm_internal<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "void at::cuda::blas::gemm<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                            "filename": "Blas.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::native::structured_mm_out_cuda::impl(at::Tensor const&, at::Tensor const&, at::Tensor const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                            "filename": "RegisterCUDA.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                            "filename": "VariableType_3.cpp",
                            "line": 0
                        },
                        {
                            "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                            "filename": "VariableType_3.cpp",
                            "line": 0
                        },
                        {
                            "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                            "filename": "",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "execute_native_thread_routine",
                            "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                            "line": 104
                        },
                        {
                            "name": "pthread_condattr_setpshared",
                            "filename": "??",
                            "line": 0
                        },
                        {
                            "name": "__xmknodat",
                            "filename": "??",
                            "line": 0
                        }
                    ]
                },
                {
                    "address": 30161502208,
                    "size": 3932160,
                    "requested_size": 0,
                    "state": "inactive",
                    "frames": []
                }
            ]
        }
    ],
    "device_traces": [
        [
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054404754,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129793536,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054408439,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "segment_alloc",
                "addr": 30144462848,
                "size": 20971520,
                "stream": 0,
                "time_us": 1748499054435924,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getNewWorkspace()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getCurrentCUDABlasHandle()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30144462848,
                "size": 8519680,
                "stream": 0,
                "time_us": 1748499054435930,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getNewWorkspace()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getCurrentCUDABlasHandle()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129793536,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054473774,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129793536,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054473776,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129793536,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054479743,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::relu(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::call(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "relu",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 1500
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                        "line": 103
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788416,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054504865,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788416,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054504867,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054505054,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054529498,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054531170,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054558134,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054558135,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054559218,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "_make_grads",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 143
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 260
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054575119,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129798656,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054593926,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30152982528,
                "size": 8519680,
                "stream": 0,
                "time_us": 1748499054594562,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getNewWorkspace()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::cuda::getCurrentCUDABlasHandle()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_internal<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mm_out_cuda::impl(at::Tensor const&, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054603704,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054611933,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054622565,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054622566,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129803776,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054623075,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129798656,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054633731,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129798656,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054633733,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129793536,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054634225,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129793536,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054634228,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054634335,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054634555,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129803776,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054634713,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129803776,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054634713,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054634885,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054634886,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054645466,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054645467,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054645472,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054645472,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054645475,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054645475,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054645477,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054645477,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054653337,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054653353,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054653407,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054653408,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054653447,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::relu(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::call(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "relu",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 1500
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                        "line": 103
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054653477,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054653477,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653496,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653561,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653561,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653616,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653627,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653664,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054653664,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054654054,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054654055,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054654108,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "_make_grads",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 143
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 260
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054654275,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654379,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054654418,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054654454,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054654478,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054654478,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654512,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654530,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654530,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654532,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654532,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054654540,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054654559,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654574,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054654575,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054654640,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054654640,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054655031,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054655031,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655034,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655034,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655035,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655035,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655037,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655037,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655277,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054655298,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054655330,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054655330,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655354,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::relu(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::call(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "relu",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 1500
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                        "line": 103
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655376,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655376,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655391,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655439,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655439,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655474,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655483,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655512,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655512,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655522,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655522,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655543,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "_make_grads",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 143
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 260
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655618,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655669,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655692,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655709,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655726,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054655726,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655751,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655763,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655763,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655764,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655765,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054655772,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054655788,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655801,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054655801,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788416,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655869,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788416,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054655870,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054656134,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054656134,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054656140,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054656140,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054656142,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054656142,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054656143,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054656143,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656391,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054656400,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054656438,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129795072,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054656438,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656465,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::relu(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::call(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "relu",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 1500
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                        "line": 103
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656485,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656485,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656513,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656560,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656560,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656591,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656598,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656628,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656628,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656638,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656638,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054656660,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "_make_grads",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 143
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 260
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656810,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656877,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054656903,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054656920,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656938,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054656942,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656967,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656980,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129800192,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656980,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656981,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129795072,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054656981,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054656988,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054657005,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657018,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129805312,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657018,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054657073,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054657073,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054657291,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054657291,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054657294,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054657294,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054657295,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054657296,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054657297,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054657297,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657478,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054657485,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054657510,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129794560,
                "size": 1048576,
                "stream": 0,
                "time_us": 1748499054657510,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                        "filename": "Blas.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657539,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::relu(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                        "filename": "VariableType_4.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::relu::call(at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "relu",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 1500
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                        "line": 103
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657558,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789440,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054657558,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789440,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657573,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "RegisterCompositeImplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                        "line": 116
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657622,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657622,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 56
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788416,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657654,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657662,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657689,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657689,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::~TensorIteratorBase()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                        "filename": "python_nn_functions.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "mse_loss",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                        "line": 3366
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "forward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                        "line": 535
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1541
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "_wrapped_call_impl",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                        "line": 1532
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_Call_Prepend",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 431
                    },
                    {
                        "name": "slot_tp_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                        "line": 7494
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657697,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788928,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054657698,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 57
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054657713,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                        "filename": "python_torch_functions_1.cpp",
                        "line": 0
                    },
                    {
                        "name": "cfunction_call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                        "line": 543
                    },
                    {
                        "name": "_PyObject_MakeTpCall",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 215
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 112
                    },
                    {
                        "name": "_make_grads",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 143
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                        "line": 260
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054658004,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterBackendSelect.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "RegisterCompositeExplicitAutograd.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658073,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658098,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054658120,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054658138,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 256,
                "stream": 0,
                "time_us": 1748499054658138,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658166,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "VariableType_0.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658178,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129799680,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658178,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658179,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129794560,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658179,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::SavedVariable::reset_data()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::ReluBackward0::release_variables()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054658187,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                        "filename": "VariableType_3.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "alloc",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658203,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                        "filename": "ReduceOps.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "RegisterCUDA.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "VariableType_2.cpp",
                        "line": 0
                    },
                    {
                        "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658237,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129804800,
                "size": 5120,
                "stream": 0,
                "time_us": 1748499054658237,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "std::vector<at::Tensor, std::allocator<at::Tensor> >::~vector()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "execute_native_thread_routine",
                        "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                        "line": 104
                    },
                    {
                        "name": "pthread_condattr_setpshared",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__xmknodat",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054658305,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129788928,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054658305,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_clear(THPVariable*)",
                        "filename": "python_variable.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_subclass_dealloc(_object*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_Py_Dealloc",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 2301
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "backward",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                        "line": 525
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 58
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054658609,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129791488,
                "size": 800,
                "stream": 0,
                "time_us": 1748499054658610,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658616,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129789952,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658616,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658618,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790464,
                "size": 80,
                "stream": 0,
                "time_us": 1748499054658618,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_requested",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054658619,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            },
            {
                "action": "free_completed",
                "addr": 30129790976,
                "size": 4,
                "stream": 0,
                "time_us": 1748499054658619,
                "frames": [
                    {
                        "name": "torch::unwind::unwind()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                        "filename": "memory_snapshot.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::free(c10::cuda::CUDACachingAllocator::Native::(anonymous namespace)::Block*)",
                        "filename": "CUDACachingAllocator.cpp",
                        "line": 0
                    },
                    {
                        "name": "c10::cuda::CUDACachingAllocator::Native::local_raw_delete(void*)",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::StorageImpl::~StorageImpl()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::intrusive_ptr<c10::StorageImpl, c10::detail::intrusive_target_default_null_type<c10::StorageImpl> >::reset_()",
                        "filename": "",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl()",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "c10::TensorImpl::~TensorImpl() [clone .localalias]",
                        "filename": "TensorImpl.cpp",
                        "line": 0
                    },
                    {
                        "name": "THPVariable_set_grad(THPVariable*, _object*, void*)",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_PyObject_GenericSetAttrWithDict",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1366
                    },
                    {
                        "name": "PyObject_GenericSetAttr",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/object.c",
                        "line": 1416
                    },
                    {
                        "name": "zero_grad",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/optim/optimizer.py",
                        "line": 825
                    },
                    {
                        "name": "_PyEval_EvalFrameDefault",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 2850
                    },
                    {
                        "name": "_fn",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py",
                        "line": 451
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "inner",
                        "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_compile.py",
                        "line": 24
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyVectorcall_Call",
                        "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                        "line": 267
                    },
                    {
                        "name": "do_call_core",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 5945
                    },
                    {
                        "name": "run_training_with_snapshot",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 60
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "<module>",
                        "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                        "line": 102
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "_PyObject_VectorcallTstate",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                        "line": 114
                    },
                    {
                        "name": "_PyEval_EvalFrame",
                        "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                        "line": 46
                    },
                    {
                        "name": "PyEval_EvalCode",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                        "line": 1134
                    },
                    {
                        "name": "run_eval_code_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1291
                    },
                    {
                        "name": "run_mod",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1312
                    },
                    {
                        "name": "pyrun_file",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 1208
                    },
                    {
                        "name": "_PyRun_SimpleFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 456
                    },
                    {
                        "name": "_PyRun_AnyFileObject",
                        "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                        "line": 90
                    },
                    {
                        "name": "pymain_run_file_obj",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 357
                    },
                    {
                        "name": "Py_BytesMain",
                        "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                        "line": 1090
                    },
                    {
                        "name": "__libc_init_first",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "__libc_start_main",
                        "filename": "??",
                        "line": 0
                    },
                    {
                        "name": "_start",
                        "filename": "??",
                        "line": 0
                    }
                ]
            }
        ]
    ],
    "allocator_settings": {
        "PYTORCH_CUDA_ALLOC_CONF": "",
        "max_split_size": -1,
        "garbage_collection_threshold": 0.0,
        "expandable_segments": false,
        "pinned_num_register_threads": 1,
        "release_lock_on_cudamalloc": false,
        "pinned_use_cuda_host_register": false,
        "roundup_power2_divisions": {
            "1": 0,
            "2": 0,
            "4": 0,
            "8": 0,
            "16": 0,
            "32": 0,
            "64": 0,
            "128": 0,
            "256": 0,
            "512": 0,
            "1024": 0,
            "2048": 0,
            "4096": 0,
            "8192": 0,
            "16384": 0,
            "32768": 0
        }
    }
}
import os
import datetime


def extract_allocation_struct_body(filepath):
    """
    Matches the first occurrence of 'pub struct Allocation' in a file,
    finds the next '{', then matches braces until the closing '}',
    and returns everything as a string between the first '{' and closing '}'.

    Args:
        filepath (str): The path to the file.

    Returns:
        str or None: The content of the struct body as a string, or None if not found.
    """
    try:
        with open(filepath, "r") as f:
            content = f.read()
    except FileNotFoundError:
        print(f"Error: File not found at {filepath}")
        return None

    struct_start_index = content.find("pub struct Allocation")
    if struct_start_index == -1:
        return None

    open_brace_index = content.find("{", struct_start_index)
    if open_brace_index == -1:
        return None

    balance = 1
    current_index = open_brace_index + 1

    while current_index < len(content) and balance != 0:
        char = content[current_index]
        if char == "{":
            balance += 1
        elif char == "}":
            balance -= 1
        current_index += 1

    if balance == 0:
        return content[open_brace_index + 1 : current_index - 1]
    else:
        return None


def generate_bool_struct_with_impl(struct_body):
    """
    Generates a new struct definition and impl block where all fields are bool
    and prefixed with 'show_', along with an `all()` constructor setting them to true.

    Args:
        struct_body (str): The body of the original struct.

    Returns:
        str: The full generated Rust code as a string.
    """
    lines = struct_body.splitlines()
    fields = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line.startswith("pub ") and ":" in line:
            field_name = line[len("pub ") :].split(":", 1)[0].strip()
            fields.append(field_name)

    struct_lines = ["pub struct AllocationDisplayConfig {"]
    struct_lines += [f"    pub show_{field}: bool," for field in fields]
    struct_lines.append("}\n")

    # start impl
    impl_lines = ["impl AllocationDisplayConfig {"]

    # method: all
    impl_lines.append("    pub fn all() -> Self {")
    impl_lines.append("        Self {")
    impl_lines += [f"            show_{field}: true," for field in fields]
    impl_lines.append("        }")
    impl_lines.append("    }\n")
    # method: none
    impl_lines.append("    pub fn none() -> Self {")
    impl_lines.append("        Self {")
    impl_lines += [f"            show_{field}: false," for field in fields]
    impl_lines.append("        }")
    impl_lines.append("    }")

    # end impl
    impl_lines.append("}")

    return "\n".join(struct_lines + impl_lines)


if __name__ == "__main__":
    path = os.path.dirname(__file__)
    filepath = os.path.join(path, "allocation.rs")

    struct_body = extract_allocation_struct_body(filepath)
    if struct_body is not None:
        print("Struct body found:\n", struct_body)
        display_code = generate_bool_struct_with_impl(struct_body)

        timestamp = f"{datetime.datetime.now():%Y.%m.%d %H:%M:%S}"
        full_output = (
            f"// This code is generated by gen_options.py at {timestamp}.\n// Do not edit manually.\n\n{display_code}\n"
        )

        output_path = os.path.join(path, "display_alloc.rs")
        with open(output_path, "w") as f:
            f.write(full_output)

        print("Code written to display_alloc.rs")
    else:
        print("Struct 'pub struct Allocation' not found or has malformed braces.")

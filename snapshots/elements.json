[
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177869534,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129793536,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507177869638,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "segment_alloc",
        "addr": 30144462848,
        "size": 20971520,
        "stream": 0,
        "time_us": 1748507177896739,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getNewWorkspace()",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getCurrentCUDABlasHandle()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30144462848,
        "size": 8519680,
        "stream": 0,
        "time_us": 1748507177896744,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getNewWorkspace()",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getCurrentCUDABlasHandle()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129793536,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177906264,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177925796,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177936789,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177936897,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177953081,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177957517,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129798656,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177965880,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30152982528,
        "size": 8519680,
        "stream": 0,
        "time_us": 1748507177967185,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getNewWorkspace()",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::cuda::getCurrentCUDABlasHandle()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_internal<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm<float>(char, char, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, at::OpMathType<float>::type, float*, long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::native::structured_mm_out_cuda::impl(at::Tensor const&, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177969645,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177972771,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129803776,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177979961,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507177986375,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177986550,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177996081,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507177996101,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177996213,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177996274,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177996419,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177996432,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177996547,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177996812,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177996924,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177996968,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177996995,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177997066,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507177997098,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177997121,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177998022,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507177998035,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177998200,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177998266,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177998375,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177998385,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177998466,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177998657,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177998751,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177998789,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177998813,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177998867,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507177998895,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507177998917,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177999603,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507177999614,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507177999678,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177999721,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177999801,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177999811,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507177999878,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507177999984,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178000072,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178000108,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178000132,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178000189,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178000218,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178000239,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178000849,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178000860,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178000914,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178000954,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178001029,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178001037,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178001101,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178001200,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178001278,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178001311,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178001333,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178001387,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178001414,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178001436,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178002023,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178002033,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178002090,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178002130,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178002205,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178002212,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178002276,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178002440,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178002527,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178002563,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178002587,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178002645,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178002673,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178002696,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178003458,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178003471,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178003544,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178003603,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178003696,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178003705,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178003779,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178003930,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178004034,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178004072,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178004097,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178004166,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178004195,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178004219,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178004938,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178004949,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178005011,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178005056,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178005140,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178005149,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178005220,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178005333,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178005421,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178005460,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178005483,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178005541,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178005569,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178005590,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178006182,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178006192,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178006248,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178006290,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178006368,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178006376,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178006444,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178006547,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178006621,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178006652,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178006679,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178006734,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178006760,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178006782,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178007386,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178007396,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178007456,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178007499,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178007577,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178007584,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178007650,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178007748,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178007815,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178007844,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178007865,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178007917,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178007942,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178007963,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178008683,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178008694,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178008757,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178008837,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178009014,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178009026,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178009117,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178009251,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178009348,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178009499,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178009550,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178009743,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178009826,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178009867,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178010734,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178010746,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178010817,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178010866,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178010957,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178010969,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178011042,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178011161,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178011248,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178011283,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178011306,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178011357,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178011384,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178011407,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178012044,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178012055,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178012113,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178012155,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178012248,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178012256,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178012323,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178012414,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178012472,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178012500,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178012520,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178012574,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178012600,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178012620,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178013196,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178013206,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178013268,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178013313,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178013394,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178013401,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178013468,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178013608,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178013749,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178013794,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178013885,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178014016,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178014059,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178014155,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178015044,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178015059,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178015147,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178015201,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178015307,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178015319,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178015414,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178015550,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178015653,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178015695,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178015721,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178015781,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178015811,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178015834,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178016631,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178016646,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129795072,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178016725,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178016780,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178016884,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178016895,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178016975,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178017102,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129800192,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178017230,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178017266,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178017292,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129805312,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178017401,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178017443,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178017474,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178018256,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 1048576,
        "stream": 0,
        "time_us": 1748507178018272,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "void at::cuda::blas::gemm_and_bias<float>(bool, bool, long, long, long, at::OpMathType<float>::type, float const*, long, float const*, long, float const*, float*, long, at::cuda::blas::GEMMAndBiasActivationEpilogue)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::(anonymous namespace)::addmm_out_cuda_impl(at::Tensor&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::native::(anonymous namespace)::Activation)",
                "filename": "Blas.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129794560,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178018344,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_clamp_min_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_unary_op(at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_clamp_min::meta(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_clamp_min(at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_clamp_min>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::clamp_min::call(at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::relu(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu(at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__relu>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&> >, at::Tensor (at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::redispatch(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::relu(c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::relu>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&)",
                "filename": "VariableType_4.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::relu::call(at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_relu(_object*, _object*, _object*)",
                "filename": "python_torch_functions_2.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "relu",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 1500
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/activation.py",
                "line": 103
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789440,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178018395,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_addmm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_addmm::meta(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_addmm(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_addmm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::addmm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::addmm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::addmm::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::linear(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "RegisterCompositeImplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::linear::call(at::Tensor const&, at::Tensor const&, std::optional<at::Tensor> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_linear(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/linear.py",
                "line": 116
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 20
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 52
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788416,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178018492,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mse_loss_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_mse_loss::meta(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178018502,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build_borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIterator::borrowing_binary_op(at::TensorBase const&, at::TensorBase const&, at::TensorBase const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::structured_mse_loss_out::impl(at::Tensor const&, at::Tensor const&, long, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mse_loss(at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::wrapper_CUDA_mse_loss>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_1.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss::call(at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_mse_loss(_object*, _object*, _object*)",
                "filename": "python_nn_functions.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "mse_loss",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/functional.py",
                "line": 3366
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "forward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/loss.py",
                "line": 535
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1541
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "do_call_core",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 5945
            },
            {
                "name": "_wrapped_call_impl",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/nn/modules/module.py",
                "line": 1532
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_Call_Prepend",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 431
            },
            {
                "name": "slot_tp_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/typeobject.c",
                "line": 7494
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 53
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129788928,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178018579,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_strided_generic<c10::ArrayRef<long> >(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_generic(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_strided_cuda(c10::ArrayRef<long>, c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>), &at::(anonymous namespace)::empty_strided>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_strided::call(c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::ones_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__ones_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::ones_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::THPVariable_ones_like(_object*, _object*, _object*)",
                "filename": "python_torch_functions_1.cpp",
                "line": 0
            },
            {
                "name": "cfunction_call",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/methodobject.c",
                "line": 543
            },
            {
                "name": "_PyObject_MakeTpCall",
                "filename": "/usr/local/src/conda/python-3.10.13/Objects/call.c",
                "line": 215
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 112
            },
            {
                "name": "_make_grads",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 143
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/autograd/__init__.py",
                "line": 260
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "backward",
                "filename": "/home/da1sypetals/miniconda3/envs/playground/lib/python3.10/site-packages/torch/_tensor.py",
                "line": 525
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "run_training_with_snapshot",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 54
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "_PyObject_VectorcallTstate",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/cpython/abstract.h",
                "line": 114
            },
            {
                "name": "<module>",
                "filename": "/home/da1sypetals/dev/torch-snapshot/snapshot/generate_snapshot.py",
                "line": 78
            },
            {
                "name": "_PyEval_EvalFrame",
                "filename": "/usr/local/src/conda/python-3.10.13/Include/internal/pycore_ceval.h",
                "line": 46
            },
            {
                "name": "PyEval_EvalCode",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/ceval.c",
                "line": 1134
            },
            {
                "name": "run_eval_code_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1291
            },
            {
                "name": "run_mod",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1312
            },
            {
                "name": "pyrun_file",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 1208
            },
            {
                "name": "_PyRun_SimpleFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 456
            },
            {
                "name": "_PyRun_AnyFileObject",
                "filename": "/usr/local/src/conda/python-3.10.13/Python/pythonrun.c",
                "line": 90
            },
            {
                "name": "pymain_run_file_obj",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 357
            },
            {
                "name": "Py_BytesMain",
                "filename": "/usr/local/src/conda/python-3.10.13/Modules/main.c",
                "line": 1090
            },
            {
                "name": "__libc_init_first",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__libc_start_main",
                "filename": "??",
                "line": 0
            },
            {
                "name": "_start",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 256,
        "stream": 0,
        "time_us": 1748507178018699,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA_memory_format_empty>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::redispatch(c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::empty_memory_format>, at::Tensor, c10::guts::typelist::typelist<c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterBackendSelect.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_memory_format::call(c10::ArrayRef<c10::SymInt>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_symint(c10::ArrayRef<c10::SymInt>, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::empty_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__empty_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::empty_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::empty_like(at::Tensor const&, c10::TensorOptions, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::native::zeros_like(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeExplicitAutograd__zeros_like>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat> > >, at::Tensor (at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "RegisterCompositeExplicitAutograd.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::zeros_like::call(at::Tensor const&, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::native::mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &at::(anonymous namespace)::(anonymous namespace)::wrapper_CUDA__mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long), &torch::autograd::VariableType::(anonymous namespace)::mse_loss_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mse_loss_backward::call(at::Tensor const&, at::Tensor const&, at::Tensor const&, long)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::MseLossBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129799680,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178018790,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat1_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790464,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178018828,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129790976,
        "size": 4,
        "stream": 0,
        "time_us": 1748507178018854,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129804800,
        "size": 5120,
        "stream": 0,
        "time_us": 1748507178018916,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_threshold_backward_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::fast_set_up(at::TensorIteratorConfig const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::TensorIteratorBase::build(at::TensorIteratorConfig&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::meta::structured_threshold_backward::meta(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_threshold_backward(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&), &at::(anonymous namespace)::wrapper_CUDA_threshold_backward>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::threshold_backward(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&), &torch::autograd::VariableType::(anonymous namespace)::threshold_backward>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "VariableType_0.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::threshold_backward::call(at::Tensor const&, at::Tensor const&, c10::Scalar const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::ReluBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129791488,
        "size": 800,
        "stream": 0,
        "time_us": 1748507178018946,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_mm_out_cuda_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_mm::meta(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_mm(at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, at::Tensor const&), &at::(anonymous namespace)::wrapper_CUDA_mm>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, at::Tensor const&> >, at::Tensor (at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::redispatch(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::mm(c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&), &torch::autograd::VariableType::(anonymous namespace)::mm>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, at::Tensor const&> >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, at::Tensor const&)",
                "filename": "VariableType_3.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::mm::call(at::Tensor const&, at::Tensor const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::details::mm_mat2_backward(at::Tensor const&, at::Tensor const&, c10::ArrayRef<c10::SymInt>, c10::ArrayRef<c10::SymInt>, c10::Layout, c10::Scalar const&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::generated::AddmmBackward0::apply(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Node::operator()(std::vector<at::Tensor, std::allocator<at::Tensor> >&&)",
                "filename": "",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    },
    {
        "action": "alloc",
        "addr": 30129789952,
        "size": 80,
        "stream": 0,
        "time_us": 1748507178018969,
        "frames": [
            {
                "name": "torch::unwind::unwind()",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::CapturedTraceback::gather(bool, bool, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::cuda::(anonymous namespace)::gather_with_cpp()",
                "filename": "memory_snapshot.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::DeviceCachingAllocator::malloc(signed char, unsigned long, CUstream_st*)",
                "filename": "CUDACachingAllocator.cpp",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::malloc(void**, signed char, unsigned long, CUstream_st*)",
                "filename": "",
                "line": 0
            },
            {
                "name": "c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate(unsigned long)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::TensorBase at::detail::_empty_generic<long>(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "",
                "line": 0
            },
            {
                "name": "at::detail::empty_generic(c10::ArrayRef<long>, c10::Allocator*, c10::DispatchKeySet, c10::ScalarType, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::ScalarType, std::optional<c10::Device>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, std::optional<c10::ScalarType>, std::optional<c10::Layout>, std::optional<c10::Device>, std::optional<bool>, std::optional<c10::MemoryFormat>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::detail::empty_cuda(c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::create_out(c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions const&)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::structured_sum_out_functional::set_output_raw_strided(long, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::TensorOptions, c10::ArrayRef<at::Dimname>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::meta::resize_reduction(at::impl::MetaBase&, at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::ScalarType, bool)",
                "filename": "ReduceOps.cpp",
                "line": 0
            },
            {
                "name": "at::meta::structured_sum_dim_IntList::meta(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &at::(anonymous namespace)::wrapper_CUDA_sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "RegisterCUDA.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::redispatch(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList(c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "c10::impl::wrap_kernel_functor_unboxed_<c10::impl::detail::WrapFunctionIntoFunctor_<c10::CompileTimeFunctionPointer<at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>), &torch::autograd::VariableType::(anonymous namespace)::sum_dim_IntList>, at::Tensor, c10::guts::typelist::typelist<c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType> > >, at::Tensor (c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)>::call(c10::OperatorKernel*, c10::DispatchKeySet, at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "VariableType_2.cpp",
                "line": 0
            },
            {
                "name": "at::_ops::sum_dim_IntList::call(at::Tensor const&, c10::OptionalArrayRef<long>, bool, std::optional<c10::ScalarType>)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::reduce_grad(at::Tensor&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::InputMetadata::maybe_reduce(unsigned long, at::Tensor, std::function<std::string (std::string const&)> const&) const",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::validate_outputs(std::vector<torch::autograd::Edge, std::allocator<torch::autograd::Edge> > const&, std::vector<at::Tensor, std::allocator<at::Tensor> >&, std::function<std::string (std::string const&)> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::evaluate_function(std::shared_ptr<torch::autograd::GraphTask>&, torch::autograd::Node*, torch::autograd::InputBuffer&, std::shared_ptr<torch::autograd::ReadyQueue> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_main(std::shared_ptr<torch::autograd::GraphTask> const&)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::Engine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "torch::autograd::python::PythonEngine::thread_init(int, std::shared_ptr<torch::autograd::ReadyQueue> const&, bool)",
                "filename": "??",
                "line": 0
            },
            {
                "name": "execute_native_thread_routine",
                "filename": "/home/conda/feedstock_root/build_artifacts/gcc_compilers_1729025086244/work/build/x86_64-conda-linux-gnu/libstdc++-v3/src/c++11/../../../../../libstdc++-v3/src/c++11/thread.cc",
                "line": 104
            },
            {
                "name": "pthread_condattr_setpshared",
                "filename": "??",
                "line": 0
            },
            {
                "name": "__xmknodat",
                "filename": "??",
                "line": 0
            }
        ]
    }
]